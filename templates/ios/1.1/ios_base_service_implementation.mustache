//
//  {{{serviceName}}}.m
//  {{{projectName}}}
//  Version: {{{version}}}
//
//  Created by Eli Kohen
//  Copyright (c) 2012 EKGev. All rights reserved.
//

#import "Base{{{serviceName}}}Logic.h"

#import "{{{projectName}}}Helper.h"
{{#imports}}
#import "{{request.name}}.h"
{{^response.isRawData}}
#import "{{response.name}}.h"
{{/response.isRawData}}
{{/imports}}
#import "ServiceResponse.h"

@implementation Base{{{serviceName}}}Logic

- (id) init{
	self = [super init];
	if(self){
		//Custom implementation
	}
	return self;
}

{{#service.messages}}
#pragma mark - {{{methodUpperCase}}}

/**
 * Helper method to fill {{{request.name}}} and call the aync service.
 * @param {{{request.name}}} request: Petición al servicio
 * @param NSInteger tag: Identificador de la llamada
 * @param Parameters: all parameters to form a {{{request.name}}} object
 * @param id<ServiceDelegate> delegate: Delegado al que llamar con la respuesta ({{{response.name}}}) del servidor, o el correspondiente error
 */
- (void) async{{methodUpperCase}}WithTag: (NSInteger) tag {{{iosRequestParams}}} andDelegate: (id<ServiceDelegate>) delegate {

	{{request.name}} *request = [[{{request.name}} alloc] init];
	{{#request.fields}}
	request.{{{iosName}}} = {{{iosName}}};
	{{/request.fields}}

	[self async{{methodUpperCase}}: request withTag: tag andDelegate: delegate];
}

/**
 * Método async{{{methodUpperCase}}} (delegate): {{{description}}}
 * @param {{{request.name}}} request: Petición al servicio
 * @param NSInteger tag: Identificador de la llamada
 * @param id<ServiceDelegate> delegate: Delegado al que llamar con la respuesta ({{{response.name}}}) del servidor, o el correspondiente error
 */
- (void) async{{methodUpperCase}}:({{request.name}} *)request withTag: (NSInteger) tag andDelegate: (id<ServiceDelegate>) delegate {
	
	[UIApplication sharedApplication].networkActivityIndicatorVisible = YES;
	
	dispatch_async(dispatch_get_global_queue(0,0), ^{
		
		NSError *error;
		BOOL networkError = ![[{{projectName}}Helper sharedInstance] checkConnection];
		
		ServiceResponse *response = nil;
		if(!networkError){
			response = [self {{method}}:request onError:&error];
		}
		
        dispatch_async(dispatch_get_main_queue(), ^{
			[UIApplication sharedApplication].networkActivityIndicatorVisible = NO;
			
			if(networkError && delegate){
				[delegate onTaskNoConnection:tag];
			}
			else if (!error && delegate) {
				if([[{{projectName}}Helper sharedInstance] checkCorrectResponse:response serviceTag: tag]){
					[delegate onTaskSuccess:response withTag:tag];
				}
				else{
					[delegate onTaskFailed:response withTag:tag];
				}
			}
			else if (error && delegate) {
				[delegate onTaskError:error withTag:tag];
			}
        });
    });
}

/**
 * Método {{{method}}}: {{{description}}}
 * @param {{{request.name}}} Petición al servicio
 * @returns {{{response.name}}} Respuesta del servidor
 */
-(ServiceResponse *) {{{method}}}:({{{request.name}}} *){{{request.javaInstanceName}}} onError:(NSError *__autoreleasing *)inError
{
	NSString *url=@"{{{url}}}";
	
	url=[[{{{projectName}}}Helper sharedInstance] preInjectURLParameters:url withObject:{{{request.javaInstanceName}}}];
	{{#fieldsInUrl}}
	{{#isBoolean}}
	NSString *string{{{nameUcase}}}=[NSString stringWithFormat:@"%@",{{{request.javaInstanceName}}}.{{{iosName}}}.boolValue ? @"true": @"false"];
    {{/isBoolean}}
	{{^isBoolean}}
	NSString *string{{{nameUcase}}}=@"";
	if({{{request.javaInstanceName}}}.{{{iosName}}}) {
        string{{{nameUcase}}}=[[NSString stringWithFormat:@"%@",{{{request.javaInstanceName}}}.{{{iosName}}}] stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
        if(!string{{{nameUcase}}}) {
            string{{{nameUcase}}}=[NSString stringWithFormat:@"%@",{{{request.javaInstanceName}}}.{{{iosName}}}];
        }
	}							 
	{{/isBoolean}}
	{{/fieldsInUrl}}

	{{#inURLbutNotField}}
    #ifdef {{.}}
	url=[url stringByReplacingOccurrencesOfString:[NSString stringWithFormat:@"${%@}",@"{{.}}"] withString:{{.}}];
    #endif
	{{/inURLbutNotField}}

	{{#fieldsInUrl}}
    url=[url stringByReplacingOccurrencesOfString:[NSString stringWithFormat:@"${%@}",@"{{{name}}}"] withString:string{{{nameUcase}}}];
	{{/fieldsInUrl}}
	
	url=[[{{{projectName}}}Helper sharedInstance] postInjectURLParameters:url  withObject:{{{request.javaInstanceName}}}];
	
	_ModelGenLog(@"URL: %@", url);
	
	{{#isWrite}}	
	NSMutableDictionary *dict=[[NSMutableDictionary alloc]init];
	{{#fieldsNotInUrl}}
	[dict setValue:[NSString stringWithFormat:@"%@",{{{request.javaInstanceName}}}.{{{iosName}}}] forKey:@"{{{name}}}"];       
	{{/fieldsNotInUrl}}
	double time=[[NSDate date] timeIntervalSince1970];
    [dict setValue:[NSNumber numberWithDouble:time] forKey:@"requestTime"];
    {{/isWrite}}
	
	ServiceResponse *result = nil;

	NSError *error=nil;
	NSString *escapedUrl = [[{{{projectName}}}Helper sharedInstance] escapeUrl:url];
    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:escapedUrl] cachePolicy:NSURLRequestReloadIgnoringCacheData timeoutInterval:20.0];
	
	{{#isWrite}}
	NSMutableArray * content = [NSMutableArray array];
	for(NSString * key in dict) {
  		[content addObject: [NSString stringWithFormat: @"%@=%@", key, dict[key]]];
    }
	NSString * body = [content componentsJoinedByString: @"&"];
	NSData * bodyData = [body dataUsingEncoding: NSUTF8StringEncoding];
	[request setHTTPBody:bodyData];
	[request setValue:@"{{{contentType}}}" forHTTPHeaderField:@"Content-Type"];
	{{#isPost}}	
	[request setHTTPMethod:@"POST"];
    {{/isPost}}
    {{#isPut}}
    [request setHTTPMethod:@"PUT"];
    {{/isPut}}
    {{#isDelete}}
    [request setHTTPMethod:@"DELETE"];
    {{/isDelete}}
    {{/isWrite}}
    {{#isWriteJSON}}

    NSDictionary *allFieldsDict=[{{{request.javaInstanceName}}} writeToDictionary];
    //Remove attributes only required for forming the url
    NSMutableDictionary *jsonDict = [[NSMutableDictionary alloc] initWithDictionary:allFieldsDict];
    {{#fieldsInUrl}}
    [jsonDict removeObjectForKey:@"{{{name}}}"];
    {{/fieldsInUrl}}
    
    NSData *requestData = [NSJSONSerialization dataWithJSONObject:jsonDict 
                                               options:NSJSONWritingPrettyPrinted
                                                 error:&error];		

	_ModelGenLog(@"%@",[[NSString alloc] initWithData:requestData encoding:NSUTF8StringEncoding]);
	{{#isPostJSON}}
	[request setHTTPMethod:@"POST"];
	{{/isPostJSON}}
	{{#isPutJSON}}
	[request setHTTPMethod:@"PUT"];
	{{/isPutJSON}}
	{{#isDeleteJSON}}
	[request setHTTPMethod:@"DELETE"];
	{{/isDeleteJSON}}
	[request setValue:@"application/json" forHTTPHeaderField:@"Accept"];
	[request setValue:@"{{contentType}}" forHTTPHeaderField:@"Content-Type"];
	[request setValue:[NSString stringWithFormat:@"%d", [requestData length]] forHTTPHeaderField:@"Content-Length"];
	[request setHTTPBody: requestData];
    
    {{/isWriteJSON}}
    {{#isGet}}

	[request setHTTPMethod:@"GET"];
    {{/isGet}}

	request = [[{{{projectName}}}Helper sharedInstance] customizeRequest:request];
    {{#isHttps}}
    
	self.receivedData = [[NSMutableData alloc] init];
	self.receivedResponse = nil;
    NSURLConnection *connection = [[NSURLConnection alloc] initWithRequest:request delegate:self];

    [connection start];
    
    self.downloadComplete = NO;
    self.error = nil;
    
    NSRunLoop *theRL = [NSRunLoop currentRunLoop];
    while (!self.downloadComplete && [theRL runMode:NSDefaultRunLoopMode beforeDate:[NSDate distantFuture]]);

    NSURLResponse *response = self.receivedResponse;
	NSData *data = self.receivedData;
	error = self.error;
	{{/isHttps}}
    {{^isHttps}}

	NSURLResponse *response = nil;
	NSData *data = [NSURLConnection sendSynchronousRequest:request returningResponse:&response error:&error];

	{{/isHttps}}

	[[{{{projectName}}}Helper sharedInstance] preprocessResponse:response];
		
    if(!error) {
    	{{#response.isRawData}}
    	if(!data || data.length == 0) data = nil;
    	result = [[ServiceResponse alloc] initWithData:data andResponse:response];
    	{{/response.isRawData}}
    	{{^response.isRawData}}
    	id json = nil;
    	if(data && data.length > 0){
	    	NSString *stringData = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];
			stringData =[[{{{projectName}}}Helper sharedInstance] preprocessData:stringData];
	        json = [NSJSONSerialization JSONObjectWithData:[stringData dataUsingEncoding:NSUTF8StringEncoding] options:kNilOptions error:&error];
    	} else{
    		data = nil;
    	}
        _ModelGenLog(@"JSON: %@",json);
        if([json isKindOfClass:[NSArray class]]){
			NSArray *jsonArray = json;
			NSMutableArray *arrayData = [[NSMutableArray alloc] initWithCapacity:jsonArray.count];
			for(NSDictionary *jsonData in jsonArray){
				{{response.name}} *dtoData = [{{response.name}} readFromDictionary:jsonData];
				[arrayData addObject:dtoData];
			}
			result = [[ServiceResponse alloc] initWithData:arrayData andResponse:response];
		}
		else if([json isKindOfClass:[NSDictionary class]]){
			{{response.name}} *dtoData = [{{response.name}} readFromDictionary:json];
        	result = [[ServiceResponse alloc] initWithData:dtoData andResponse:response];
		}
		else{
			result = [[ServiceResponse alloc] initWithData:data andResponse:response];
		}
		{{/response.isRawData}}
    } else {
    	_ModelGenLog(@"Error: %@",error);
    	if (inError) {
    		*inError=error;
    	}
    	return nil;
    }	
    
	return result;
}

{{/service.messages}}

#pragma mark - Metodos heredados de NSURLConnectionDelegate

- (BOOL)connection:(NSURLConnection *)connection canAuthenticateAgainstProtectionSpace:(NSURLProtectionSpace *)protectionSpace {
    
    return [protectionSpace.authenticationMethod isEqualToString:NSURLAuthenticationMethodServerTrust];
}

- (void)connection:(NSURLConnection *)connection didReceiveAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge {
    if ([challenge.protectionSpace.authenticationMethod isEqualToString:NSURLAuthenticationMethodServerTrust])
            [challenge.sender useCredential:[NSURLCredential credentialForTrust:challenge.protectionSpace.serverTrust] forAuthenticationChallenge:challenge];
    
    [challenge.sender continueWithoutCredentialForAuthenticationChallenge:challenge];
}


- (void)connection:(NSURLConnection *)connection didFailWithError:(NSError *)error {
    
    self.receivedData = nil;
    self.receivedResponse = nil;
    
    NSLog(@"Connection failed! Error - %@ %@",
          [error localizedDescription],
          [[error userInfo] objectForKey:NSURLErrorFailingURLStringErrorKey]);
    
    self.error = error;
    self.downloadComplete = YES;
}

- (void)connection:(NSURLConnection *)connection didReceiveResponse:(NSURLResponse *)response {

	self.receivedResponse = response;
    
    [self.receivedData setLength:0];
}

- (void)connection:(NSURLConnection *)connection didReceiveData:(NSData *)data {
    
    [self.receivedData appendData:data];
}

- (void)connectionDidFinishLoading:(NSURLConnection *)connection {
    
    self.downloadComplete = YES;
    
}


@end

 