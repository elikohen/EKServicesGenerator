/**
  {{{serviceName}}}Service
  {{{projectName}}}

Created by Service-Generator.
  Copyright (c) 2012 EKGDev. All rights reserved.
  Version: {{{version}}}
*/
package {{{packagename}}}.logic.base;

import android.text.TextUtils;
import android.util.Log;

import {{{packagename}}}.model.dto.*; 
import {{{packagename}}}.logic.*;
import {{{packagename}}}.logic.utils.*;
import java.net.URLEncoder;

import com.google.api.client.http.HttpRequest;
import com.google.api.client.http.HttpResponse;


import java.util.List;
import java.util.ArrayList;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.ThreadPoolExecutor;

import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONTokener;


/**
 * Servicio que realiza las llamadas a Server,
 * Este servicio corresponde con la logica {{{serviceName}}}
 */
public class Base{{{serviceName}}}Logic
{
	private final ThreadPoolExecutor mExecutor;
	/**
	 * Evitamos que se reinicialice mediante un constructor privado
	 */
    public Base{{{serviceName}}}Logic() { 
      mExecutor = (ThreadPoolExecutor)Executors.newFixedThreadPool(4);
    }
{{#messages}}

	private static class {{{methodUpperCase}}}Loader extends ConnectionLoader<{{{request.name}}}> {
		final Base{{{serviceName}}}Logic mLogic;
		public {{{methodUpperCase}}}Loader(Base{{{serviceName}}}Logic logic, {{{request.name}}} request, NotifiedHttpRequest listener, int tag) {
			super(request, listener, tag);
			mLogic = logic;
		}
		@Override
		protected BetterHttpResponse doInBackground({{{request.name}}} request) throws Exception {
			return mLogic.{{{method}}}(request);
		}
	}

    public HttpOperation async{{{methodUpperCase}}}({{^emptyParams?}}{{{javaRequestParams}}},{{/emptyParams?}} NotifiedHttpRequest listener, int tag){
      	{{{request.name}}} {{{request.javaInstanceName}}}=new {{{request.name}}}();
      	{{#request.fields}}
      	{{{request.javaInstanceName}}}.set{{{nameUcase}}}({{{javaName}}});  
      	{{/request.fields}}
      	return async{{{methodUpperCase}}}({{{request.javaInstanceName}}}, listener, tag);
    }

    public HttpOperation async{{{methodUpperCase}}}({{{request.name}}} {{{request.javaInstanceName}}}, NotifiedHttpRequest listener, int tag){
    	Future<?> future = mExecutor.submit(new {{{methodUpperCase}}}Loader(this, {{{request.javaInstanceName}}},listener,tag));
      	return new BaseHttpOperation(future);
    }

	/**
	 * Metodo {{{method}}}: {{{description}}}
	{{#request.fields}}
	 * @param {{{javaName}}} {{{comment}}}
	{{/request.fields}}
	 * @returns BetterHttpResponse Respuesta del servidor
	 * @throws Exception Error de comunicacion / datos 
	 */
	public BetterHttpResponse {{{method}}}({{{javaRequestParams}}}) throws Exception
	{		
		{{{request.name}}} {{{request.javaInstanceName}}}=new {{{request.name}}}();
		{{#request.fields}}
		{{{request.javaInstanceName}}}.set{{{nameUcase}}}({{{javaName}}});	
		{{/request.fields}}
		return {{{method}}}({{{request.javaInstanceName}}});
	}
	
	/**
	 * Metodo {{{method}}}: {{{description}}}
	 * @param {{{request.javaInstanceName}}} Peticion al servicio
	 * @returns BetterHttpResponse Respuesta del servidor
	 * @throws Exception Error de comunicacion / datos 
	 */
	public BetterHttpResponse {{{method}}}({{{request.name}}} {{{request.javaInstanceName}}}) throws Exception
	{

		if (Thread.currentThread().isInterrupted()) {
            throw new Exception("Thread interrupted - {{{method}}} Start");
        }
	
		{{#onSend}}
			{{{onSend}}}({{{request.javaInstanceName}}});
		{{/onSend}}
		// Insertamos los parametros de la url contenidos en el objeto request : {{{url}}}
		String url="{{{url}}}";
		url=LogicHelper.getInstance().preInjectURLParameters(url,{{{request.javaInstanceName}}});
		{{#fieldsInUrl}}
		if({{{request.javaInstanceName}}}.get{{{nameUcase}}}()==null)
		{
			url=url.replace("${"+"{{{name}}}"+"}","");
		}
		else
		{
			url=url.replace("${"+"{{{name}}}"+"}",String.valueOf({{{request.javaInstanceName}}}.get{{{nameUcase}}}()));
		}	
		{{/fieldsInUrl}}
		
		url=LogicUtils.fixSystemProperties(url);
		url=url.replace("|",URLEncoder.encode("|","UTF-8"));

		{{#isQuery}}
		{{#hasFieldsNotInUrl}}
		//Se incluyen el resto de atributos no contenidos en la url como parametros get
		List<String> parameters = new ArrayList<String>();
		{{#fieldsNotInUrl}}
		if({{{request.javaInstanceName}}}.get{{{nameUcase}}}()!=null){
			parameters.add("{{{name}}}="+URLEncoder.encode(String.valueOf({{{request.javaInstanceName}}}.get{{{nameUcase}}}()),"UTF-8"));
		}
		{{/fieldsNotInUrl}}
		if(!parameters.isEmpty()){
			{{#hasUrlParams}}
			url += "&"+TextUtils.join("&", parameters);
			{{/hasUrlParams}}
			{{^hasUrlParams}}
			url += "?"+TextUtils.join("&", parameters);
			{{/hasUrlParams}}
		}

		{{/hasFieldsNotInUrl}}
		{{/isQuery}}
		url=LogicHelper.getInstance().postInjectURLParameters(url,{{{request.javaInstanceName}}});
		Log.d(Base{{{serviceName}}}Logic.class.getName()+"::{{{method}}}","SENT:"+url);

		{{#isGet}}
		HttpRequest request = RequestHelper.buildGetRequest(url);
		{{/isGet}}
		{{#isDelete}}
		HttpRequest request = RequestHelper.buildDeleteRequest(url);
		{{/isDelete}}
		{{#isPostJSON}}
		JSONObject jsonObject = {{{request.javaInstanceName}}}.serialize();
		HttpRequest request = RequestHelper.buildPostRequest(url,jsonObject);
		{{/isPostJSON}}
		{{#isPutJSON}}
		JSONObject jsonObject = {{{request.javaInstanceName}}}.serialize();
		HttpRequest request = RequestHelper.buildPutRequest(url,jsonObject);
		{{/isPutJSON}}

		if (Thread.currentThread().isInterrupted()) {
            throw new Exception("Thread interrupted - {{{method}}} Pre execute");
        }
		LogicHelper.getInstance().addHeaders(request);
        LogicHelper.getInstance().preExecute(request);
		HttpResponse response = request.execute();
		LogicHelper.getInstance().postExecute(request,response);
		if (Thread.currentThread().isInterrupted()) {
            throw new Exception("Thread interrupted - {{{method}}} Post execute");
        }
		{{^response.isRawData}}
		String result=LogicUtils.convertStreamToString(response.getContent());
		result=LogicHelper.getInstance().preprocessResponse(result);
		
		Log.d(Base{{{serviceName}}}Logic.class.getName()+"::{{{method}}}","RECEIVED:"+result);
		{{/response.isRawData}}
		{{#response.isRawData}}
		RawData result=new RawData(LogicUtils.convertStreamToBytes(response.getContent()));
		BetterHttpResponseImpl responseImpl = new BetterHttpResponseImpl(response,result);
		{{/response.isRawData}}
		{{^response.isRawData}}
		Object objectResponse = null;
		if(result.length() > 0){
			Object json = new JSONTokener(result).nextValue();
			if (json instanceof JSONObject){
				{{{response.name}}} {{{response.javaInstanceName}}};
				{{{response.javaInstanceName}}}={{{response.name}}}.create((JSONObject)json);
				{{#onReceive}}
				{{{onReceive}}}({{{request.javaInstanceName}}},{{{response.javaInstanceName}}});
				{{/onReceive}}
				objectResponse = {{{response.javaInstanceName}}};
			}
			else if (json instanceof JSONArray){
				JSONArray jsonArray = (JSONArray)json;
				List<{{{response.name}}}> listResponse = new ArrayList<{{{response.name}}}>();
				for(int i = 0; i < jsonArray.length(); ++i){
					JSONObject aJson = jsonArray.getJSONObject(i);
					listResponse.add({{{response.name}}}.create(aJson));
				}
				objectResponse = listResponse;
			}
		}
		BetterHttpResponseImpl responseImpl = new BetterHttpResponseImpl(response, objectResponse);
		{{/response.isRawData}}

		if (Thread.currentThread().isInterrupted()) {
            throw new Exception("Thread interrupted - {{{method}}} End");
        }
		
		return responseImpl;
	}
{{/messages}}	
}
