//
//  {{message.methodUpperCase}}Task.m
//  {{projectName}}
//  Version: {{version}}
//
//  Created by Eli Kohen
//  Copyright (c) 2012 EKGDev. All rights reserved.
//

#import "{{message.methodUpperCase}}Task.h"
#import "{{projectName}}Helper.h"
#import "{{message.service}}Logic.h"

@implementation {{message.methodUpperCase}}Task

+ (void) {{message.name}}TaskForRequest:({{message.request.name}} *)request completed:(void(^)({{projectName}}Response *response))completedBlock error:(void(^)(NSError *error))errorBlock {

	[UIApplication sharedApplication].networkActivityIndicatorVisible = YES;

	dispatch_async(dispatch_get_global_queue(0,0), ^{

		NSError *error;	
		
		{{projectName}}Response *response = [[{{message.service}}Logic sharedInstance] {{message.method}}:request onError:&error];
	
        dispatch_async(dispatch_get_main_queue(), ^{
			[UIApplication sharedApplication].networkActivityIndicatorVisible = NO;
        
			if (!error && completedBlock) {
				completedBlock(response);
			}
			
			if (error && errorBlock) {
				errorBlock(error);
			}
        });
    });
}


+ (void) {{message.name}}TaskForRequest:({{message.request.name}} *)request withTag: (NSInteger) tag andDelegate: (id<TaskDelegate>) delegate {
	
	[UIApplication sharedApplication].networkActivityIndicatorVisible = YES;
	
	dispatch_async(dispatch_get_global_queue(0,0), ^{
		
		NSError *error;
		BOOL networkError = ![[{{projectName}}Helper sharedInstance] checkConnection];
		
		{{projectName}}Response *response = nil;
		if(!networkError){
			response = [[{{message.service}}Logic sharedInstance] {{message.method}}:request onError:&error];
		}
		
        dispatch_async(dispatch_get_main_queue(), ^{
			[UIApplication sharedApplication].networkActivityIndicatorVisible = NO;
			
			if(networkError && delegate){
				[delegate onTaskNoConnection:tag];
			}
			else if (!error && delegate) {
				if([[{{projectName}}Helper sharedInstance] checkCorrectResponse:response serviceTag: tag]){
					[delegate onTaskSuccess:response withTag:tag];
				}
				else{
					[delegate onTaskFailed:response withTag:tag];
				}
			}
			else if (error && delegate) {
				[delegate onTaskError:error withTag:tag];
			}
        });
    });
}


@end
