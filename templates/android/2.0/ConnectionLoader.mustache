/**
  {{projectName}}

  Created by Generator
  Copyright (c) 2013 EKGDev. All rights reserved.
  Version: {{version}}
*/

package {{{packagename}}}.logic.utils;

import org.apache.http.NoHttpResponseException;
import org.apache.http.conn.ConnectTimeoutException;
import org.apache.http.conn.HttpHostConnectException;

import android.os.Handler;
import android.os.Message;
import android.util.Log;

import java.net.SocketTimeoutException;

import {{{packagename}}}.logic.LogicHelper;

public abstract class ConnectionLoader<T> extends Handler implements Runnable{
	
	final T mRequest;
	final NotifiedHttpRequest mListener;
	final int mTag;
	
	BetterHttpResponse mResponse = null;
	Exception mException = null;
	
	public ConnectionLoader(T request, NotifiedHttpRequest listener, int tag){
		mRequest = request;
		mListener = listener;
		mTag = tag;
	}
	
	/*
	 * BACKGROUND EXECUTION
	 */
	@Override
	public void run() {
		
        if (Thread.currentThread().isInterrupted()) {
            Log.d("ConnectionLoader","Thread interrupted - Start");
            return;
        }

        int tryouts = LogicHelper.TIMEOUT_TRYOUTS;
        while (tryouts > 0) {
            if (Thread.currentThread().isInterrupted()) {
                Log.d("ConnectionLoader","Thread interrupted - Background Loop: "+tryouts);
                return;
            }
            try {
                mResponse = doInBackground(mRequest);
                mException = null;
                tryouts = 0;
            } catch (SocketTimeoutException ex) {
                Log.d("ConnectionLoader", "SocketTimeoutException, retrying: " + ex.getMessage());
                mException = ex;
                tryouts--;
            } catch (Exception ex) {
                Log.d("ConnectionLoader", "Exception: " + ex.getMessage());
                mException = ex;
                tryouts = 0;
            }
        }

        if (Thread.currentThread().isInterrupted()) {
            Log.d("ConnectionLoader","Thread interrupted - End");
            return;
        }

        Message message = new Message();
        message.setTarget(this);
        message.what = mTag;
        message.sendToTarget();
	}
	
	protected abstract BetterHttpResponse doInBackground(T request) throws Exception;
	
	
	/*
	 * MAIN THREAD EXECUTION
	 */
	
	public void handleMessage(Message msg) {		
		
        if (mListener == null) return;

        if (mException != null) {
            if (mException.getCause() instanceof HttpHostConnectException) {
                mListener.notifyNoConnection(mTag);
            }
            else {
                mListener.notifyErrorConnecting(mException, mTag);
            }
        }
        else if (LogicHelper.getInstance().checkCorrectResponse(mResponse)) {
            mListener.notifySuccess(mResponse, mTag);
        }
        else {
            if (mResponse.getDataObject() != null) {
                mListener.notifyError(mResponse, mTag);
            }
            else {
                mListener.notifyErrorConnecting(new Exception("Services Generator: No response"), mTag);
            }
        }
	}		
}
