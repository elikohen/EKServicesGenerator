//
//  {{{serviceName}}}.m
//  {{{projectName}}}
//  Version: {{{version}}}
//
//  Created by Eli Kohen
//  Copyright (c) 2012 EKGev. All rights reserved.
//

#import "Base{{{serviceName}}}Logic.h"

#import "{{{projectName}}}Helper.h"
{{#imports}}
#import "{{request.name}}.h"
#import "{{response.name}}.h"
#import "{{request.daoClassName}}.h"
#import "{{response.daoClassName}}.h"
{{/imports}}
#import "{{{projectName}}}Response.h"

@implementation Base{{{serviceName}}}Logic


{{#service.messages}}

	/**
	 * Método {{{method}}}JSON: {{{description}}}
	 * @param {{{request.javaInstanceName}}} Petición al servicio
	 * @returns NSDictionary Respuesta del servidor
	 */
	
	-(NSDictionary *) {{{method}}}JSON:({{{request.name}}} *){{{request.javaInstanceName}}} onError:(NSError *__autoreleasing *)inError
	{
		NSString *url=@"{{{url}}}";
		
		url=[[{{{projectName}}}Helper sharedInstance] preInjectURLParameters:url withObject:{{{request.javaInstanceName}}}];
		{{#request.fields}}

			{{#isBoolean}}
				NSString *string{{{nameUcase}}}=[NSString stringWithFormat:@"%@",{{{request.javaInstanceName}}}.{{{javaName}}}.boolValue ? @"true": @"false"];  
			{{/isBoolean}}
			{{^isBoolean}}
				NSString *string{{{nameUcase}}}=@"";
				if({{{request.javaInstanceName}}}.{{{javaName}}})
				{
				string{{{nameUcase}}}=[[NSString stringWithFormat:@"%@",{{{request.javaInstanceName}}}.{{{javaName}}}] stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
				if(!string{{{nameUcase}}})
				{
					string{{{nameUcase}}}=[NSString stringWithFormat:@"%@",{{{request.javaInstanceName}}}.{{{javaName}}}];
				}
				
				}							 
			{{/isBoolean}}
		{{/request.fields}}
		
		{{#inURLbutNotField}}
			#ifdef $field
				url=[url stringByReplacingOccurrencesOfString:@"${${field}}" withString:${field}];
			#endif
		{{/inURLbutNotField}}

		{{#request.fields}}
        	url=[url stringByReplacingOccurrencesOfString:[NSString stringWithFormat:@"${%@}",@"{{{name}}}"]
        	    withString:string{{{nameUcase}}}];
  		{{/request.fields}}
  		
  		url=[[{{{projectName}}}Helper sharedInstance] postInjectURLParameters:url withObject:{{{request.javaInstanceName}}}];
  		
  		_ModelGenLog(@"URL: %@", url);  		
  		
		NSMutableDictionary *dict=[[NSMutableDictionary alloc]init];

		{{#request.fields}}
		[dict setValue:[NSString stringWithFormat:@"%@",{{{request.javaInstanceName}}}.{{{javaName}}}] forKey:@"{{{name}}}"];       
		{{/request.fields}}

		double time=[[NSDate date] timeIntervalSince1970];
        [dict setValue:[NSNumber numberWithDouble:time] forKey:@"requestTime"];
    
    	NSString *escapedUrl = [[{{{projectName}}}Helper sharedInstance] escapeUrl:url];
	    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:escapedUrl] cachePolicy:NSURLRequestReloadIgnoringCacheData timeoutInterval:20.0];
		
		NSError *error=nil;

        {{#isPost}}
		
		NSMutableArray * content = [NSMutableArray array];
		for(NSString * key in dict)
		{
      		[content
        		addObject: [NSString stringWithFormat: @"%@=%@", key, dict[key]]];
        }
    	NSString * body = [content componentsJoinedByString: @"&"];
    	NSData * bodyData = [body dataUsingEncoding: NSUTF8StringEncoding];
    	[request setHTTPBody:bodyData];
    	[request setValue:@"application/x-www-form-urlencoded" forHTTPHeaderField:@"Content-Type"];		
    	[request setHTTPMethod:@"POST"];

		{{/isPost}}

        {{#isPut}}
		
		NSMutableArray * content = [NSMutableArray array];
		for(NSString * key in dict)
		{
      		[content
        		addObject: [NSString stringWithFormat: @"%@=%@", key, dict[key]]];
        }
    	NSString * body = [content componentsJoinedByString: @"&"];
    	NSData * bodyData = [body dataUsingEncoding: NSUTF8StringEncoding];
    	[request setHTTPBody:bodyData];
    	[request setValue:@"application/x-www-form-urlencoded" forHTTPHeaderField:@"Content-Type"];		
    	[request setHTTPMethod:@"PUT"];
		
        {{/isPut}}
        {{#isDelete}}
		NSMutableArray * content = [NSMutableArray array];
		for(NSString * key in dict)
		{
      		[content
        		addObject: [NSString stringWithFormat: @"%@=%@", key, dict[key]]];
        }
    	NSString * body = [content componentsJoinedByString: @"&"];
    	NSData * bodyData = [body dataUsingEncoding: NSUTF8StringEncoding];
    	[request setHTTPBody:bodyData];
    	[request setValue:@"application/x-www-form-urlencoded" forHTTPHeaderField:@"Content-Type"];		
    	[request setHTTPMethod:@"DELETE"];
		
        {{/isDelete}}

        {{#isPostJSON}}
  
	    NSDictionary *jsonDict=[[{{request.daoClassName}} sharedInstance] writeToDictionary:{{{request.javaInstanceName}}}];
	    
	    NSData *requestData = [NSJSONSerialization dataWithJSONObject:jsonDict 
                                                   options:NSJSONWritingPrettyPrinted
                                                     error:&error];		

		_ModelGenLog(@"%@",[[NSString alloc] initWithData:requestData encoding:NSUTF8StringEncoding]);
		
		[request setHTTPMethod:@"POST"];
		[request setValue:@"application/json" forHTTPHeaderField:@"Accept"];
		[request setValue:@"application/json" forHTTPHeaderField:@"Content-Type"];
		[request setValue:[NSString stringWithFormat:@"%d", [requestData length]] forHTTPHeaderField:@"Content-Length"];
		[request setHTTPBody: requestData];

        {{/isPostJSON}}
        {{#isDeleteJSON}}
			    
	    NSDictionary *jsonDict=[[{{request.daoClassName}} sharedInstance] writeToDictionary:{{{request.javaInstanceName}}}];
	    
	    NSData *requestData = [NSJSONSerialization dataWithJSONObject:jsonDict 
                                                   options:NSJSONWritingPrettyPrinted
                                                     error:&error];		

		_ModelGenLog(@"%@",[[NSString alloc] initWithData:requestData encoding:NSUTF8StringEncoding]);
		
		[request setHTTPMethod:@"DELETE"];
		[request setValue:@"application/json" forHTTPHeaderField:@"Accept"];
		[request setValue:@"application/json" forHTTPHeaderField:@"Content-Type"];
		[request setValue:[NSString stringWithFormat:@"%d", [requestData length]] forHTTPHeaderField:@"Content-Length"];
		[request setHTTPBody: requestData];

        {{/isDeleteJSON}}

        {{#isPutJSON}}
			    
	    NSDictionary *jsonDict=[[{{request.daoClassName}} sharedInstance] writeToDictionary:{{{request.javaInstanceName}}}];
	    
	    NSData *requestData = [NSJSONSerialization dataWithJSONObject:jsonDict 
                                                   options:NSJSONWritingPrettyPrinted
                                                     error:&error];		

		_ModelGenLog(@"%@",[[NSString alloc] initWithData:requestData encoding:NSUTF8StringEncoding]);
		
		[request setHTTPMethod:@"PUT"];
		[request setValue:@"application/json" forHTTPHeaderField:@"Accept"];
		[request setValue:@"application/json" forHTTPHeaderField:@"Content-Type"];
		[request setValue:[NSString stringWithFormat:@"%d", [requestData length]] forHTTPHeaderField:@"Content-Length"];
		[request setHTTPBody: requestData];

        {{/isPutJSON}}

        {{#isGet}}
		[request setHTTPMethod:@"GET"];
        {{/isGet}}

        request = [[{{{projectName}}}Helper sharedInstance] customizeRequest:request];

        {{#isHttps}}
	    
		self.receivedData = [[NSMutableData alloc] init];
		self.receivedResponse = nil;
        NSURLConnection *connection = [[NSURLConnection alloc] initWithRequest:request delegate:self];

        [connection start];
        
        self.downloadComplete = NO;
        self.error = nil;
        
        NSRunLoop *theRL = [NSRunLoop currentRunLoop];
        while (!self.downloadComplete && [theRL runMode:NSDefaultRunLoopMode beforeDate:[NSDate distantFuture]]);

        [[{{{projectName}}}Helper sharedInstance] preprocessResponse:self.receivedResponse];
        
	    if(!self.error) {

	        NSDictionary *json = [NSJSONSerialization JSONObjectWithData:self.receivedData options:kNilOptions error:&error];
	        return json;
	        
	    } else {
	    
	    	_ModelGenLog(@"Error: %@",self.error);
	    	if (inError) {
	    		*inError = self.error;
	    	}
	    	return nil;
	    }
		    
        {{/isHttps}}
        {{^isHttps}}
  	
		NSURLResponse *response = nil;
  		NSData *data = [NSURLConnection sendSynchronousRequest:request returningResponse:&response error:&error];

  		[[{{{projectName}}}Helper sharedInstance] preprocessResponse:response];

	    if(!error) {
	     
	        NSDictionary *json = [NSJSONSerialization JSONObjectWithData:data options:kNilOptions error:&error];
	        return json;
	        
	    } else {
	    
	    	_ModelGenLog(@"Error: %@",error);
	    	if (inError) {
	    		*inError=error;
	    	}
	    	return nil;
	    }
	    {{/isHttps}}
	}
	
	
	/**
	 * Método {{{method}}}: {{{description}}}
	 * @param {{{request.javaInstanceName}}} Petición al servicio
	 * @returns {{{response.name}}} Respuesta del servidor
	 */
	-({{{projectName}}}Response *) {{{method}}}:({{{request.name}}} *){{{request.javaInstanceName}}} onError:(NSError *__autoreleasing *)inError
	{
		NSString *url=@"{{{url}}}";
		
		url=[[{{{projectName}}}Helper sharedInstance] preInjectURLParameters:url withObject:{{{request.javaInstanceName}}}];
		{{#request.fields}}
			{{#isBoolean}}
				NSString *string{{{nameUcase}}}=[NSString stringWithFormat:@"%@",{{{request.javaInstanceName}}}.{{{javaName}}}.boolValue ? @"true": @"false"];
		    {{/isBoolean}}
			{{^isBoolean}}
				NSString *string{{{nameUcase}}}=@"";
				if({{{request.javaInstanceName}}}.{{{javaName}}})
				{
                    string{{{nameUcase}}}=[[NSString stringWithFormat:@"%@",{{{request.javaInstanceName}}}.{{{javaName}}}] stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
                    if(!string{{{nameUcase}}})
                    {
                        string{{{nameUcase}}}=[NSString stringWithFormat:@"%@",{{{request.javaInstanceName}}}.{{{javaName}}}];
                    }
				}							 
			{{/isBoolean}}
		{{/request.fields}}

		{{#inURLbutNotField}}
		    #ifdef {{.}}
        		url=[url stringByReplacingOccurrencesOfString:[NSString stringWithFormat:@"${%@}",@"{{.}}"] withString:{{.}}];
            #endif
		{{/inURLbutNotField}}

		{{#request.fields}}
        url=[url stringByReplacingOccurrencesOfString:[NSString stringWithFormat:@"${%@}",@"{{{name}}}"]
                	    withString:string{{{nameUcase}}}];
  		{{/request.fields}}
  		
  		url=[[{{{projectName}}}Helper sharedInstance] postInjectURLParameters:url  withObject:{{{request.javaInstanceName}}}];
  		
  		_ModelGenLog(@"URL: %@", url);
  		
		NSMutableDictionary *dict=[[NSMutableDictionary alloc]init];
		{{#request.fields}}
		[dict setValue:[NSString stringWithFormat:@"%@",{{{request.javaInstanceName}}}.{{{javaName}}}] forKey:@"{{{name}}}"];       
		{{/request.fields}}
		double time=[[NSDate date] timeIntervalSince1970];
        [dict setValue:[NSNumber numberWithDouble:time] forKey:@"requestTime"];
        
		
		{{{projectName}}}Response *result = nil;
    
    	NSError *error=nil;
    	NSString *escapedUrl = [[{{{projectName}}}Helper sharedInstance] escapeUrl:url];
	    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:escapedUrl] cachePolicy:NSURLRequestReloadIgnoringCacheData timeoutInterval:20.0];
				
        {{#isPost}}
		NSMutableArray * content = [NSMutableArray array];
		for(NSString * key in dict)
		{
      		[content
        		addObject: [NSString stringWithFormat: @"%@=%@", key, dict[key]]];
        }
    	NSString * body = [content componentsJoinedByString: @"&"];
    	NSData * bodyData = [body dataUsingEncoding: NSUTF8StringEncoding];
    	[request setHTTPBody:bodyData];
    	[request setValue:@"application/x-www-form-urlencoded" forHTTPHeaderField:@"Content-Type"];		
    	[request setHTTPMethod:@"POST"];
        {{/isPost}}
        {{#isPut}}
		NSMutableArray * content = [NSMutableArray array];
		for(NSString * key in dict)
		{
      		[content
        		addObject: [NSString stringWithFormat: @"%@=%@", key, dict[key]]];
        }
    	NSString * body = [content componentsJoinedByString: @"&"];
    	NSData * bodyData = [body dataUsingEncoding: NSUTF8StringEncoding];
    	[request setHTTPBody:bodyData];
    	[request setValue:@"application/x-www-form-urlencoded" forHTTPHeaderField:@"Content-Type"];		
    	[request setHTTPMethod:@"PUT"];
        {{/isPut}}
        {{#isDelete}}
		NSMutableArray * content = [NSMutableArray array];
		for(NSString * key in dict)
		{
      		[content
        		addObject: [NSString stringWithFormat: @"%@=%@", key, dict[key]]];
        }
    	NSString * body = [content componentsJoinedByString: @"&"];
    	NSData * bodyData = [body dataUsingEncoding: NSUTF8StringEncoding];
    	[request setHTTPBody:bodyData];
    	[request setValue:@"application/x-www-form-urlencoded" forHTTPHeaderField:@"Content-Type"];		
    	[request setHTTPMethod:@"DELETE"];
        {{/isDelete}}
        {{#isPostJSON}}
			    
	    NSDictionary *jsonDict=[[{{request.daoClassName}} sharedInstance] writeToDictionary:{{{request.javaInstanceName}}}];
	    
	    NSData *requestData = [NSJSONSerialization dataWithJSONObject:jsonDict 
                                                   options:NSJSONWritingPrettyPrinted
                                                     error:&error];		

		_ModelGenLog(@"%@",[[NSString alloc] initWithData:requestData encoding:NSUTF8StringEncoding]);
		
		[request setHTTPMethod:@"POST"];
		[request setValue:@"application/json" forHTTPHeaderField:@"Accept"];
		[request setValue:@"application/json" forHTTPHeaderField:@"Content-Type"];
		[request setValue:[NSString stringWithFormat:@"%d", [requestData length]] forHTTPHeaderField:@"Content-Length"];
		[request setHTTPBody: requestData];

        {{/isPostJSON}}

        {{#isDeleteJSON}}

			    
	    NSDictionary *jsonDict=[[{{request.daoClassName}} sharedInstance] writeToDictionary:{{{request.javaInstanceName}}}];
	  
	    NSData *requestData = [NSJSONSerialization dataWithJSONObject:jsonDict 
                                                   options:NSJSONWritingPrettyPrinted
                                                     error:&error];		

		_ModelGenLog(@"%@",[[NSString alloc] initWithData:requestData encoding:NSUTF8StringEncoding]);
		
		[request setHTTPMethod:@"DELETE"];
		[request setValue:@"application/json" forHTTPHeaderField:@"Accept"];
		[request setValue:@"application/json" forHTTPHeaderField:@"Content-Type"];
		[request setValue:[NSString stringWithFormat:@"%d", [requestData length]] forHTTPHeaderField:@"Content-Length"];
		[request setHTTPBody: requestData];

        {{/isDeleteJSON}}

        {{#isPutJSON}}
	    NSDictionary *jsonDict=[[{{request.daoClassName}} sharedInstance] writeToDictionary:{{{request.javaInstanceName}}}];
	    
	    NSData *requestData = [NSJSONSerialization dataWithJSONObject:jsonDict 
                                                   options:NSJSONWritingPrettyPrinted
                                                     error:&error];		

		_ModelGenLog(@"%@",[[NSString alloc] initWithData:requestData encoding:NSUTF8StringEncoding]);
		
		[request setHTTPMethod:@"PUT"];
		[request setValue:@"application/json" forHTTPHeaderField:@"Accept"];
		[request setValue:@"application/json" forHTTPHeaderField:@"Content-Type"];
		[request setValue:[NSString stringWithFormat:@"%d", [requestData length]] forHTTPHeaderField:@"Content-Length"];
		[request setHTTPBody: requestData];

        {{/isPutJSON}}
        {{#isGet}}
		[request setHTTPMethod:@"GET"];
        {{/isGet}}

		request = [[{{{projectName}}}Helper sharedInstance] customizeRequest:request];

        {{#isHttps}}
	    
		self.receivedData = [[NSMutableData alloc] init];
		self.receivedResponse = nil;
        NSURLConnection *connection = [[NSURLConnection alloc] initWithRequest:request delegate:self];

        [connection start];
        
        self.downloadComplete = NO;
        self.error = nil;
        
        NSRunLoop *theRL = [NSRunLoop currentRunLoop];
        while (!self.downloadComplete && [theRL runMode:NSDefaultRunLoopMode beforeDate:[NSDate distantFuture]]);

        [[{{{projectName}}}Helper sharedInstance] preprocessResponse:self.receivedResponse];
        
	    if(!self.error) {
			NSString *stringData = [[NSString alloc] initWithData:self.receivedData encoding:NSUTF8StringEncoding];
			stringData =[[{{{projectName}}}Helper sharedInstance] preprocessData:stringData];
			[self.receivedData setData:[stringData dataUsingEncoding:NSUTF8StringEncoding]];
	    	
	        NSDictionary *json = [NSJSONSerialization JSONObjectWithData:self.receivedData options:kNilOptions error:&error];
	        _ModelGenLog(@"JSON: %@",json);
	        {{response.name}} *dtoData = [[{{response.daoClassName}} sharedInstance] readFromDictionary:json];
	        result = [[{{{projectName}}}Response alloc] initWithData:dtoData andResponse:response];

            }
            else
            {
	    	_ModelGenLog(@"Error: %@",self.error);

	    	if (inError) {
	    		*inError = self.error;
	    	}
	    	return nil;
	    }
	    {{/isHttps}}
        {{^isHttps}}


  		NSURLResponse *response = nil;
  		NSData *data = [NSURLConnection sendSynchronousRequest:request returningResponse:&response error:&error];

  		[[{{{projectName}}}Helper sharedInstance] preprocessResponse:response];
  		
  		NSString *stringData = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];
  		stringData =[[{{{projectName}}}Helper sharedInstance] preprocessData:stringData];
  		data = [stringData dataUsingEncoding:NSUTF8StringEncoding];
  		
	    if(!error) {
	    
	        NSDictionary *json = [NSJSONSerialization JSONObjectWithData:data options:kNilOptions error:&error];
	        _ModelGenLog(@"JSON: %@",json);
	       	{{response.name}} *dtoData = [[{{response.daoClassName}} sharedInstance] readFromDictionary:json];
	        result = [[{{{projectName}}}Response alloc] initWithData:dtoData andResponse:response];
	    } else {
	    
	    	_ModelGenLog(@"Error: %@",error);
	    	if (inError) {
	    		*inError=error;
	    	}
	    	return nil;
	    }
  		
        {{/isHttps}}

		return result;
		
	}

{{/service.messages}}

#pragma mark - Metodos heredados de NSURLConnectionDelegate

- (BOOL)connection:(NSURLConnection *)connection canAuthenticateAgainstProtectionSpace:(NSURLProtectionSpace *)protectionSpace {
    
    return [protectionSpace.authenticationMethod isEqualToString:NSURLAuthenticationMethodServerTrust];
}

- (void)connection:(NSURLConnection *)connection didReceiveAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge {
    if ([challenge.protectionSpace.authenticationMethod isEqualToString:NSURLAuthenticationMethodServerTrust])
            [challenge.sender useCredential:[NSURLCredential credentialForTrust:challenge.protectionSpace.serverTrust] forAuthenticationChallenge:challenge];
    
    [challenge.sender continueWithoutCredentialForAuthenticationChallenge:challenge];
}


- (void)connection:(NSURLConnection *)connection didFailWithError:(NSError *)error {
    
    self.receivedData = nil;
    self.receivedResponse = nil;
    
    NSLog(@"Connection failed! Error - %@ %@",
          [error localizedDescription],
          [[error userInfo] objectForKey:NSURLErrorFailingURLStringErrorKey]);
    
    self.error = error;
    self.downloadComplete = YES;
}

- (void)connection:(NSURLConnection *)connection didReceiveResponse:(NSURLResponse *)response {

	self.receivedResponse = response;
    
    [self.receivedData setLength:0];
}

- (void)connection:(NSURLConnection *)connection didReceiveData:(NSData *)data {
    
    [self.receivedData appendData:data];
}

- (void)connectionDidFinishLoading:(NSURLConnection *)connection {
    
    self.downloadComplete = YES;
    
}


@end

 