//
//  {{{dto.className}}}.m
//  ${projectName}
//  Version: ${version}
//
//  Created by Eli Kohen
//  Copyright (c) 2012 EKGDev. All rights reserved.
//

#import "{{{dto.name}}}.h"
{{#dto.objectFields}}
#import "{{{iosBaseTypeSingular}}}.h"
#import "{{{typeJavaDAO}}}.h"
{{/dto.objectFields}}
{{#dto.objectArrayFields}}
#import "{{{iosBaseTypeSingular}}}.h"
#import "{{{typeJavaDAO}}}.h"
{{/dto.objectArrayFields}}
#import "{{{dto.daoClassName}}}.h"

@implementation {{{dto.daoClassName}}}


// Get the shared instance and create it if necessary.
+ ({{{dto.daoClassName}}} *)sharedInstance {
    
    static dispatch_once_t onceQueue;
    static {{{dto.daoClassName}}} *instance = nil;
    
    dispatch_once(&onceQueue, ^{ instance = [[self alloc] init]; });
    return instance;
}

-(NSDictionary *) writeToDictionary:({{{dto.name}}} *)instance
{
NSMutableDictionary *dict=[[NSMutableDictionary alloc]init];	
		
	{{#dto.baseFields}}
		{{#isBoolean}}
			[dict setValue:instance.{{{javaName}}}.boolValue ? @"true": @"false" forKey:@"{{{name}}}"];
	    {{/isBoolean}}
		{{^isBoolean}}
			[dict setValue:instance.{{{javaName}}} forKey:@"{{{name}}}"];
		{{/isBoolean}}
	{{/dto.baseFields}}
		
	{{#dto.baseArrayFields}}
	    {{#isBoolean}})
			[dict setValue:instance.{{{javaName}}}.boolValue ? @"true": @"false" forKey:@"{{{name}}}"];
		{{/isBoolean}}
        {{^isBoolean}}
			[dict setValue:instance.{{{javaName}}} forKey:@"{{{name}}}"];
		{{/isBoolean}}
	{{/dto.baseArrayFields}}
	
	{{#dto.objectFields}}
	NSDictionary *dict{{{javaName}}}=[[{{{typeJavaDAO}}} sharedInstance] writeToDictionary:instance.{{{javaName}}}];
	[dict setValue:dict{{{javaName}}} forKey:@"{{{name}}}"];
	{{/dto.objectFields}}

	{{#dto.objectArrayFields}}
	NSMutableArray *array{{{javaName}}}=[[NSMutableArray alloc]init];
	for({{{iosBaseTypeSingular}}} *typeItem in instance.{{{javaName}}})
	{
		NSDictionary *dict{{{javaName}}}=[[{{{typeJavaDAO}}} sharedInstance] writeToDictionary:typeItem];
		[array{{{javaName}}} addObject:dict{{{javaName}}}];
	}
	[dict setValue:array{{{javaName}}} forKey:@"{{{name}}}"];
	
	{{/dto.objectArrayFields}}
	return dict;
}

-({{{dto.name}}} *) readFromDictionary:(NSDictionary *)dict
{
	{{{dto.name}}} *instance=[[{{{dto.name}}} alloc]init];

    {{#dto.objectArrayFields}}
    instance.{{{javaName}}}=[[NSMutableArray alloc]init];
    {{/dto.objectArrayFields}}

    {{#dto.baseFields}}
    if (![[dict objectForKey:@"{{{name}}}"] isKindOfClass:[NSNull class]]) {
        	instance.{{{javaName}}}=[dict objectForKey:@"{{{name}}}"];
        }
    {{/dto.baseFields}}

    {{#dto.baseArrayFields}}
	NSArray *{{{name}}}Array=[dict objectForKey:@"{{{name}}}"];
	NSMutableArray *{{{name}}}MutableArray=[[NSMutableArray alloc]init];
	for({{{iosBaseTypeSingular}}} *item in {{{name}}}Array)
	{
		[{{{name}}}MutableArray addObject:item];
	}
	instance.{{{javaName}}}={{{name}}}MutableArray;
    {{/dto.baseArrayFields}}
  
    {{#dto.objectFields}}
	if ([dict objectForKey:@"{{{name}}}"]) {
        instance.{{{javaName}}}=[[{{{typeJavaDAO}}} sharedInstance] readFromDictionary:[dict objectForKey:@"{{{name}}}"]];
    }
    {{/dto.objectFields}}

    {{#dto.objectArrayFields}}
	NSDictionary *{{{name}}}Item = nil;
	if(![[dict objectForKey:@"{{{name}}}"] isKindOfClass:[NSNull class]])
	{
		{{{name}}}Item=[dict objectForKey:@"{{{name}}}"];
	}
	
	if([{{{name}}}Item isKindOfClass:[NSArray class]])
	{
		NSArray *{{{name}}}Array=[dict objectForKey:@"{{{name}}}"];
		NSMutableArray *{{{name}}}MutableArray=[[NSMutableArray alloc]init];
		for(NSDictionary *data in {{{name}}}Array)
		{
			{{{iosBaseTypeSingular}}} *item=[[{{{typeJavaDAO}}} sharedInstance] readFromDictionary:data];
			[{{{name}}}MutableArray addObject:item];
		}
		instance.{{{javaName}}}={{{name}}}MutableArray;
	}
	else if ({{{name}}}Item)
	{
		NSMutableArray *{{{name}}}MutableArray=[[NSMutableArray alloc]init];
		{{{iosBaseTypeSingular}}} *item=[[{{{typeJavaDAO}}} sharedInstance] readFromDictionary:{{{name}}}Item];
		[{{{name}}}MutableArray addObject:item];
		instance.{{{javaName}}}={{{name}}}MutableArray;
	}
    {{/dto.objectArrayFields}}
	return instance;
}


// Establece valores a partir de un NSArray
-(NSArray *) readFromDictionaryArray:(NSArray *)dictArray
{
	NSMutableArray *mutableArray=[[NSMutableArray alloc]init];
	for(NSDictionary *dict in dictArray)
	{
		[mutableArray addObject:[self readFromDictionary:dict]];
	}
	return mutableArray;
}
@end
 