package {{{packagename}}}.logic.utils;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;

public class LogicUtils {
	/**
	 * Lee el contenido de un stream como una cadena
	 * @param is InputStream del que leer
	 * @return Cadena leida
	 * @throws IOException
	 */
	public static String convertStreamToString(InputStream is) throws IOException {
		BufferedReader reader = new BufferedReader(new InputStreamReader(is));
		StringBuilder sb = new StringBuilder();

		String line = null;
			while ((line = reader.readLine()) != null) {
				sb.append(line + "\n");
			}
		return sb.toString();
	}

		/**
	 * Lee el contenido de un stream como bytes
	 * @param is InputStream del que leer
	 * @return Bytes leidos
	 * @throws IOException
	 */
	public static byte[] convertStreamToBytes(InputStream is) throws IOException {
		ByteArrayOutputStream buffer = new ByteArrayOutputStream();

		int nRead;
		byte[] data = new byte[16384];

		while ((nRead = is.read(data, 0, data.length)) != -1) {
		  buffer.write(data, 0, nRead);
		}

		buffer.flush();

		return buffer.toByteArray();
	}
	
	/**
	 * A�ade las propiedades de sistema en los par�metros que aun no tienen valor establecido
	 * @param URL original
	 * @returns URL modificada anyadiendo las propiedades de sistema
	 */
	public static String fixSystemProperties(String url)
	{
		while(url.contains("${"))
		{
			int start=url.indexOf("${")+2;
			int end=url.indexOf("}",start);
			String key=url.substring(start,end);
			String value=System.getProperty(key,"");
			url=url.replace("${"+key+"}",value);
		}
		return url;
	}
}
