package {{{packagename}}}.model.dto.base;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.List;
import java.util.ArrayList;
import android.os.Parcel;
import android.os.Parcelable;
import {{{packagename}}}.model.dto.*;

/**
 Created by Service-Generator.
  Copyright (c) 2012 EKGDev. All rights reserved.
  Version: {{{version}}}
 */
public class {{{projectName}}}DTOBundle
{
{{#dtos}}
	/**
	 * DTO que define la clase {{{name}}}
	 */
	public static class Base{{{name}}} implements {{#fyMode}}FyResponse,{{/fyMode}} Parcelable
	{

		// Constantes para la lectura de campos de los JSON
		{{#baseFields}}
		private static final String CONSTANT_{{{nameFullUcase}}}="{{{name}}}";	
		{{/baseFields}}
		{{#baseArrayFields}}
		private static final String CONSTANT_{{{nameFullUcase}}}="{{{name}}}";	
		{{/baseArrayFields}}
		{{#objectFields}}
		private static final String CONSTANT_{{{nameFullUcase}}}="{{{name}}}";	
		{{/objectFields}}
		{{#objectArrayFields}}
		private static final String CONSTANT_{{{nameFullUcase}}}="{{{name}}}";	
		{{/objectArrayFields}}

		/**
		 * Construye un objeto del tipo {{{name}}} a partir del
		 * JSON del mismo.
		 */
		public static {{{name}}} create(JSONObject value) throws JSONException
		{
			{{{name}}} returnValue=new {{{name}}}();
			
			{{#baseFields}}
			{{#isLong}}
			if(value.has(CONSTANT_{{nameFullUcase}}) && !value.get(CONSTANT_{{nameFullUcase}}).toString().equals("null") )
			{
				returnValue.set{{{nameUcase}}}(Long.parseLong(String.valueOf(value.get(CONSTANT_{{nameFullUcase}}))));
			}
			{{/isLong}}
			{{#isInteger}}
			if(value.has(CONSTANT_{{nameFullUcase}}) && !value.get(CONSTANT_{{nameFullUcase}}).toString().equals("null") )
			{
			if(value.get(CONSTANT_{{nameFullUcase}}).getClass()==String.class)
			{
				returnValue.set{{{nameUcase}}}(Integer.parseInt((String)value.get(CONSTANT_{{nameFullUcase}})));	
			}
			else
			{
			returnValue.set{{{nameUcase}}}(({{{typeJava}}})value.get(CONSTANT_{{nameFullUcase}}));
			}
			}	
			{{/isInteger}}
			{{#isFloat}}
			if(value.has(CONSTANT_{{nameFullUcase}}) && !value.get(CONSTANT_{{nameFullUcase}}).toString().equals("null") )
			{
			if(value.get(CONSTANT_{{nameFullUcase}}}).getClass()==String.class)
			{
				returnValue.set{{{nameUcase}}}(Float.parseFloat((String)value.get(CONSTANT_{{nameFullUcase}})));	
			}
			else
			{
			returnValue.set{{{nameUcase}}}(({{{typeJava}}})value.get(CONSTANT_{{nameFullUcase}}));
			}
			}	
			{{/isFloat}}
			{{#isDouble}}
			if(value.has(CONSTANT_{{nameFullUcase}}) && !value.get(CONSTANT_{{nameFullUcase}}).toString().equals("null") )
			{		
				returnValue.set{{{nameUcase}}}(Double.valueOf(String.valueOf(value.get(CONSTANT_{{nameFullUcase}}))));			
			}	
			{{/isDouble}}
			{{#isBoolean}}
			if(value.has(CONSTANT_{{nameFullUcase}}) && !value.get(CONSTANT_{{nameFullUcase}}).toString().equals("null") )
			{
			if(value.get(CONSTANT_{{nameFullUcase}}).getClass()==String.class)
			{
				returnValue.set{{{nameUcase}}}(Boolean.parseBoolean((String)value.get(CONSTANT_{{nameFullUcase}})));	
			}
			else
			{
			returnValue.set{{{nameUcase}}}(({{{typeJava}}})value.get(CONSTANT_{{nameFullUcase}}));
			}
			}	
			{{/isBoolean}}		
			{{#isString}}
			if(value.has(CONSTANT_{{nameFullUcase}}) && !value.get(CONSTANT_{{nameFullUcase}}).toString().equals("null") )
			{
			returnValue.set{{{nameUcase}}}(({{{typeJava}}})value.get(CONSTANT_{{nameFullUcase}}));
			}
			{{/isString}}
			{{/baseFields}}
		
			{{#baseArrayFields}}
			ArrayList<{{{baseTypeSingular}}}> {{{javaName}}}List=new ArrayList<{{{baseTypeSingular}}}>();
			if(value.has(CONSTANT_{{nameFullUcase}}) && !value.get(CONSTANT_{{nameFullUcase}}).toString().equals("null") )
			{
			JSONArray {{{name}}}Array=value.getJSONArray(CONSTANT_{{nameFullUcase}});
			for(int i=0;i!={{{name}}}Array.length();i++)
			{
					{{#isString}}
					{{{javaName}}}List.add({{{name}}}Array.get(i).toString());
					{{/isString}}
			}
			}
			returnValue.set{{{nameUcase}}}({{{javaName}}}List);
			{{/baseArrayFields}}
		
			{{#objectFields}}
			if(value.has(CONSTANT_{{nameFullUcase}}) && !value.get(CONSTANT_{{nameFullUcase}}).toString().equals("null") )
			{
			{{{typeJava}}} {{{javaName}}}={{{baseTypeSingular}}}.create((JSONObject)value.get(CONSTANT_{{nameFullUcase}}));
			returnValue.set{{{nameUcase}}}({{{javaName}}});
			}
			{{/objectFields}}
		
			{{#objectArrayFields}}
			ArrayList<{{{baseTypeSingular}}}> {{{javaName}}}List=new ArrayList<{{{baseTypeSingular}}}>();
			if(value.has(CONSTANT_{{nameFullUcase}}) && !value.get(CONSTANT_{{nameFullUcase}}).toString().equals("null") )
			{
				if(value.get(CONSTANT_{{nameFullUcase}}) instanceof JSONArray)
				{
					JSONArray {{{javaName}}}Array=(JSONArray)value.get(CONSTANT_{{nameFullUcase}});
					for(int i=0;i!={{{javaName}}}Array.length();i++)
					{
						JSONObject obj=(JSONObject){{{javaName}}}Array.get(i);
						{{{javaName}}}List.add({{{baseTypeSingular}}}.create(obj));
					}
				}
				else
				{
					{{{javaName}}}List.add({{{baseTypeSingular}}}.create((JSONObject)value.get(CONSTANT_{{nameFullUcase}})));
				}
			}
			returnValue.set{{{nameUcase}}}({{{javaName}}}List);
			{{/objectArrayFields}}
			
			return returnValue;
		}
		
		/**
		 * Construye un JSONObject partiendo de este {{{name}}}
		 */
		public JSONObject serialize() throws JSONException {		
			JSONObject returnValue = new JSONObject();
			
			{{#baseFields}}
			if(this.get{{{nameUcase}}}()!=null)
			{		
				returnValue.put("{{{name}}}", (this.get{{{nameUcase}}}() == null)? JSONObject.NULL : this.get{{{nameUcase}}}());
			}
			{{/baseFields}}
			{{#baseArrayFields}}
			if(this.get{{{nameUcase}}}()!=null)
			{
				returnValue.put("{{{name}}}",new JSONArray(this.get{{{nameUcase}}}()));
			}	
			{{/baseArrayFields}}
			{{#objectFields}}
			if(this.get{{{nameUcase}}}()!=null)
			{
				returnValue.put("{{{name}}}",this.get{{{nameUcase}}}().serialize());
			}
			{{/objectFields}}
			{{#objectArrayFields}}
			if(this.get{{{nameUcase}}}()!=null)
			{
			JSONArray {{{name}}}Array = new JSONArray();
			for ({{{baseTypeSingular}}} {{{javaName}}}Object : this.get{{{nameUcase}}}()) {
				{{{name}}}Array.put({{{javaName}}}Object.serialize());
			}
			returnValue.put("{{{name}}}",{{{name}}}Array);
			}
			{{/objectArrayFields}}

			return returnValue;
		}

		public Base{{{name}}}(Parcel in) {
			readFromParcel(in);
		}
	
		public Base{{{name}}}() {
		}
	
		{{#fields}}
		//{{{comment}}}
		private {{{typeJava}}} {{{javaName}}}; 
		{{/fields}}
		
		// Setters y Getters
		
		{{#fields}}
		/**
		 * Setter de la propiedad {{{javaName}}} , {{{comments}}}
		 * @param {{{javaName}}} valor a establecer en el set
		 */
		public void set{{{nameUcase}}}({{{typeJava}}} {{{javaName}}})
		{
			this.{{{javaName}}}={{{javaName}}};
		}
		/**
		 * Getter de la propiedad {{{javaName}}} , {{{comments}}}
		 * @returns Valor de la propiedad {{{javaName}}}
		 */
		public {{{typeJava}}} get{{{nameUcase}}}()
		{
			return {{{javaName}}};
		}
		{{/fields}}

		{{#fyMode}}
		public boolean isValid(){
			{{#isResponse}}
			return (responseCode != null && responseCode.equals("000"));
			{{/isResponse}}
			{{^isResponse}}
			return true;
			{{/isResponse}}
		}

		public String getCode(){
			{{#isResponse}}
			return responseCode;
			{{/isResponse}}
			{{^isResponse}}
			return null;
			{{/isResponse}}
		}
		{{^hasDescriptionField}}
		public String getDescription(){
			{{#isResponse}}
			return responseDescription;
			{{/isResponse}}
			{{^isResponse}}
			return null;
			{{/isResponse}}
		}
		{{/hasDescriptionField}}
		{{/fyMode}}
		
		@Override
		public int describeContents() {
			return 0;
		}

		@Override
		public void writeToParcel(Parcel dest, int flags) {
		{{#baseFields}}
			{{#isString}}
			dest.writeString({{{javaName}}});
			{{/isString}}
			{{#isLong}}
			dest.writeLong({{{javaName}}});
			{{/isLong}}
			{{#isInteger}}
			dest.writeInt({{{javaName}}});
			{{/isInteger}}
			{{#isDouble}}
			dest.writeDouble({{{javaName}}});
			{{/isDouble}}
			{{#isBoolean}}
			dest.writeByte((byte)(({{{javaName}}} != null && {{{javaName}}})? 1:0));
			{{/isBoolean}}
			{{#isFloat}}
			dest.writeFloat({{{javaName}}});
			{{/isFloat}}
		{{/baseFields}}

{{#baseArrayFields}}
			dest.writeList({{{javaName}}});
{{/baseArrayFields}}
{{#objectFields}}
			dest.writeParcelable({{{javaName}}}, flags);
{{/objectFields}}
{{#objectArrayFields}}
			dest.writeTypedList({{{javaName}}});
{{/objectArrayFields}}
		}
		
		public void readFromParcel(Parcel in) {
{{#baseFields}}	
	{{#isString}}
			{{{javaName}}} = in.readString();
	{{/isString}}
	{{#isLong}}
			{{{javaName}}} = in.readLong();
	{{/isLong}}
	{{#isInteger}}
			{{{javaName}}} = in.readInt();
	{{/isInteger}}
	{{#isDouble}}
			{{{javaName}}} = in.readDouble();
	{{/isDouble}}
	{{#isBoolean}}
			{{{javaName}}} = in.readByte() == 1;
	{{/isBoolean}}
	{{#isFloat}}
			{{{javaName}}} = in.readFloat();
	{{/isFloat}}
{{/baseFields}}
{{#baseArrayFields}}
			{{{javaName}}} = new ArrayList<{{{baseTypeSingular}}}>(); 
			in.readList({{{javaName}}}, {{{baseTypeSingular}}}.class.getClassLoader());
{{/baseArrayFields}}
{{#objectFields}}
			{{{javaName}}} = in.readParcelable({{{baseTypeSingular}}}.class.getClassLoader());
{{/objectFields}}
{{#objectArrayFields}}
			{{{javaName}}} = new ArrayList<{{{baseTypeSingular}}}>();
			in.readTypedList({{{javaName}}}, {{{baseTypeSingular}}}.CREATOR);
{{/objectArrayFields}}
		}
		
		public static final Parcelable.Creator<Base{{{name}}}> CREATOR =
			new Parcelable.Creator<Base{{{name}}}>() {
				public Base{{{name}}} createFromParcel(Parcel in) {
					return new Base{{{name}}}(in);
				}
				public Base{{{name}}}[] newArray(int size) {
					return new Base{{{name}}}[size];
				}
			};
			
	}
{{/dtos}}
}